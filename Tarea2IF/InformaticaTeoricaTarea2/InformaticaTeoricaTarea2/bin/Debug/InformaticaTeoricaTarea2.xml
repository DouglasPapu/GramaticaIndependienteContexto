<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InformaticaTeoricaTarea2</name>
    </assembly>
    <members>
        <member name="F:InformaticaTeoricaTarea2.FNC.components">
            <summary>
            Variable del diseñador necesaria.
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.FNC.Dispose(System.Boolean)">
            <summary>
            Limpiar los recursos que se estén usando.
            </summary>
            <param name="disposing">true si los recursos administrados se deben desechar; false en caso contrario.</param>
        </member>
        <member name="M:InformaticaTeoricaTarea2.FNC.InitializeComponent">
            <summary>
            Método necesario para admitir el Diseñador. No se puede modificar
            el contenido de este método con el editor de código.
            </summary>
        </member>
        <member name="T:InformaticaTeoricaTarea2.Grammar">
            <summary>
            Clase que se encarga de identificar una gramatica. 
            </summary>
        </member>
        <member name="F:InformaticaTeoricaTarea2.Grammar.rules">
            <summary>
            Aquí estaran guardadas las producciones 
            </summary>
        </member>
        <member name="F:InformaticaTeoricaTarea2.Grammar.variables">
            <summary>
            Se encarga de almacenar las variables usadas por el usuario en su gramatica.
            </summary>
        </member>
        <member name="F:InformaticaTeoricaTarea2.Grammar.terminals">
            <summary>
            Se encarga de almacenar las variables terminales de la gramatica.
            </summary>
        </member>
        <member name="F:InformaticaTeoricaTarea2.Grammar.availableVariables">
            <summary>
            Se encarga de guardar todas las variables que se pueden usar en la gramatica.
            </summary>
        </member>
        <member name="F:InformaticaTeoricaTarea2.Grammar.newProductions">
            <summary>
            Nuevas producciones que se generan al obtener las producciones binarias
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.#ctor(System.String)">
            <summary>
            Se encarga de generar la gramatica con un formato especifico digitado por el usuario.
            </summary>
            <param name="texto">
             Es la gramatica ingresada por el usuario. 
            </param>
            <exception cref="T:System.Exception">
            Lanza excepciones si la gramatica no cumple con el formato especifico.
            </exception>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getTerminables">
            <summary>
            Obtiene las variables terminables de la gramatica
            </summary>
            <returns>
            Retorna una lista con las variables terminables
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getNoTerminables">
            <summary>
            Obtiene las variables no terminables de la gramatica
            </summary>
            <returns>
            Retorna una lista con las variables no terminables
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getAttainable">
            <summary>
            Obtiene las variables alcanzables de la gramatica
            </summary>
            <returns>
            Retorna una lista con las variables alcanzables
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getNoAttainable">
            <summary>
            Obtiene las variables no alcanzables de la gramatica
            </summary>
            <returns>
            Retorna una lista con las variables no alcanzables
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getVoidable">
            <summary>
            Obtiene las variables anulables de la gramatica
            </summary>
            <returns>
            Retorna una lista con las variables anulables
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getUnitarySet(System.String)">
            <summary>
            Obtiene el conjunto unitario de una variable
            </summary>
            <param name="generador">
            Representa la variable a la cual se calcula el conjunto unitario
            </param>
            <returns>
            Una lista con las variables pertenecientes al conjunto unitario de la variable pasada como parametro
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getGenerators">
            <summary>
            Obtiene todas las variables que actuan como generadores. Una variable actua como generador si tiene
            una regla asociada.
            </summary>
            <returns>
            Una lista con todas las variables de la gramatica que tienen un cuerpo asociado
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.giveProductions(System.String)">
            <summary>
            Obtiene la produccion asociada a una variable
            </summary>
            <param name="generador">
            Representa la variable de la cual se quiere obtener su produccion
            </param>
            <returns>
            Un objeto Production que representa la produccion asociada a la variable pasada como parametro
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.removeNoTerminables">
            <summary>
            Metodo que elimina todas las variables no terminables de la gramatica.
            Al eliminar una variable no terminable se pierde su cuerpo asociada y todas las producciones que la contenian
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.removeNoAttainable">
            <summary>
            Metodo que elimina todas las variables no alcanzables de la gramatica.
            Al eliminar una variable no alcanzable se pierde su cuerpo asociada y todas las producciones que la contenian
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.removeLambdaProductions">
            <summary>
            Metodo que elimina y simula, añadiendo nuevas producciones, todas las producciones labmda.
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.removeUnitariesProductions">
            <summary>
            Metodo que elimina y simula, añadiendo nuevas producciones, todas las producciones unitarias
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.generateVariablesForEachTerminal">
            <summary>
            Toda produccion con tamaño mayor a 1 y que contenga un terminal, debe reemplazar dicho terminal por
            una variable. Este metodo realiza esta tarea teniendo como recurso las variables posibles y las variables
            hasta el momento utilizadas.
            Se añaden nuevas producciones con el terminal reemplazado
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.generateBinaryProductions">
            <summary>
            Convierte cada cuerpo de una produccion en un cuerpo binario
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.areAllProductionsBinary">
            <summary>
            Determina si todas las reglas de la gramatica tienen sus producciones en forma binaria.
            </summary>
            <returns>
            Retorna true si todas las reglas tienen sus producciones en forma binaria. En caso contrario, retorna false
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getProductionWith(System.String)">
            <summary>
            Busca sobre las nuevas producciones generadas
            una produccion que tenga al parametro como produccion.
            Las nuevas producciones generadas estan representadas por el atributo newProductions.
            </summary>
            <param name="prod">
            String que representa una produccion o un cuerpo de la produccion
            </param>
            <returns>
            Retorna la PRODUCCION que tiene como Cuerpo el parametro. En caso de que no encuentre ninguna regla,
            retorna null.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.getGeneratorOfLessThanOneOfTheProductions(System.Collections.Generic.List{System.String})">
            <summary>
            Obtiene las variables que en su produccion asociada producen alguna de las producciones pasadas como parametro
            </summary>
            <param name="producciones">
            Lista de string que representa las producciones
            </param>
            <returns>
            Una lista de string con las variables
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.generatePossibleProductions(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Genera producciones a partir de dos listas cuyo contenido son variables.
            </summary>
            <param name="lista1">
            Lista de string
            </param>
            <param name="lista2">
            Lista de string
            </param>
            <returns>
            Retorna una lista de string con las nuevas producciones
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Grammar.ToString">
            <summary>
            Genera una cadena de texto que representa este objeto Gramatica
            </summary>
            <returns>
            Un string que representa este objeto Gramatica
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Program.Main">
            <summary>
            Punto de entrada principal para la aplicación.
            </summary>
        </member>
        <member name="T:InformaticaTeoricaTarea2.Remove">
            <summary>
            Elimina un caracter de una cadena.
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Remove.RemoveAt(System.String,System.Int32)">
            <summary>
            Permite eliminar un caracter de un string.
            </summary>
            <param name="str">
            cadena a eliminar el caracter.
            </param>
            <param name="position">
            posicion donde se encuentra el caracter a eliminar.
            </param>
            <returns>
            el string sin el caracter pasado por parametro.
            </returns>
        </member>
        <member name="T:InformaticaTeoricaTarea2.Production">
            <summary>
            Clase que se encarga de identificar una producción de la gramatica
            y válida el proceso de Chomsky en cada una.
            </summary>
        </member>
        <member name="F:InformaticaTeoricaTarea2.Production.LAMBDA">
            <summary>
            Constante que permite identificar el lambda de la gramatica.
            </summary>
        </member>
        <member name="F:InformaticaTeoricaTarea2.Production.generator">
            <summary>
            Almacena el generador, es decir la variable.
            </summary>
        </member>
        <member name="F:InformaticaTeoricaTarea2.Production.productions">
            <summary>
            Lista que guarda todas las producciones de un generador.
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Método constructor de la clase.
            </summary>
            <param name="generator"></param>
            <param name="productions"></param>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.isProductionTerminableByVariableTerminable(System.Collections.Generic.List{System.String})">
            <summary>
            Se encarga de verificar si una producción es terminable por una variable terminable.
            </summary>
            <param name="terminables"></param>
            <returns name="reply"></returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.isProductionTerminable">
            <summary>
            Verifica si una produccion es terminable por contener unicamente variables terminables.
            </summary>
            <returns name="reply"></returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.attainableVariables">
            <summary>
            Obtiene las variables alcanzables, es decir las variables a las que puedo llegar 
            empezando por la produccion S.
            </summary>
            <returns name="attainable">
            Devuelve una lista con las variables alcanzables.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.isProductionsVoidableByVoidableVariable(System.Collections.Generic.List{System.String})">
            <summary>
            Verifica si una producción es anulable por variables anulables.
            </summary>
            <param name="voidable"></param>
            <returns name="answer">
            Devuelve true si la producción es anulable por variables anulables, false en caso contrario.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.isVoidableByProduction">
            <summary>
            Verifica si la produccion es anulable por el hecho de tener %. (Lambda).
            </summary>
            <returns name="answer">
            Devuelve true si la producción es anulable, false en caso contrario.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.unitProductions">
            <summary>
            Se encarga de devolver las producciones que son unitarias.
            </summary>
            <returns name="reply">
            Devuelve una lista con todas las producciones unitarias.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.removeProductionsWithUselessVariables(System.Collections.Generic.List{System.String})">
            <summary>
            Se encarga de borrar las variables inutiles de las producciones de la GIC.
            </summary>
            <param name="variables"></param>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.simulateProductionsLambda(System.Collections.Generic.List{System.String})">
            <summary>
            Simula las producciones lambdas en la GIC.
            </summary>
            <param name="voidables"></param>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.generateBinaries(System.Int32,System.Int32)">
            <summary>
            Genera la lista de numeros binarios en una cadena.
            </summary>
            <param name="components">
            Simplemente indica la cantidad de binarios que se tienen en cuenta al generar.
            </param>
            <param name="limit">
            dice cuantos binarios crear.
            </param>
            <returns name="roster">
            devuelve una lista de los binarios en una cadena.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.decimalToBinary(System.Int32,System.Int32)">
            <summary>
            Se encarga de convertir un numero decimal a binario.
            </summary>
            <param name="number">
            Numero decimal a convertir.
            </param>
            <param name="components">
            Es la cantidad de binarios que debe tener el numero.
            </param>
            <returns>
            un string del numero binario.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.getNoUnitProductions">
            <summary>
            Se encarga de encontrar las producciones no unitarias.
            </summary>
            <returns name="answer">
            Devuelve una lista con las producciones no unitarias.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.setProductions(System.Collections.Generic.List{System.String})">
            <summary>
            Se encarga de añadir nuevas producciones a la lista de producciones de la gramatica.
            </summary>
            <param name="newProductions"></param>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.removeUnitProductions">
            <summary>
            Se encarga de eliminar las producciones no unitarias de la gramatica.
            </summary>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.getBinariesProductions(InformaticaTeoricaTarea2.Grammar)">
            <summary>
            Se encarga de transformar las producciones en producciones binarias
            </summary>
            <param name="g">
            Un objeto de tipo Grammar que tiene las reglas de esta clase.
            </param>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.convertListToString(System.Collections.Generic.List{System.String})">
            <summary>
            Se encarga de convertir una lista de cuerpos de la produccion
            en un string.
            </summary>
            <param name="ab"></param>
            <returns name="aux">
            La lista concatenada en un string.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.isBinary">
            <summary>
            Se encarga de decir si la produccion es binaria, es decir constan de dos variables o una terminal.
            </summary>
            <returns>
            Devuelve true si la produccion es Binaria. En otro caso, retorna false. 
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.validateProductionsT(System.String)">
            <summary>
            Se encarga de obtener una produccion y convertirla en un arreglo
            teniendo en cuenta las variables Tn como una sola. 
            </summary>
            <param name="prod"></param>
            <returns></returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.existProduction(System.String)">
            <summary>
            Verifica si existe una produccion en la gramatica
            </summary>
            <param name="production"></param>
            <returns>
            Retorna true si existe la produccion en la gramatica. En caso contrario, retorna false.
            </returns>
        </member>
        <member name="M:InformaticaTeoricaTarea2.Production.ToString">
            <summary>
            Genera una cadena de texto que representa este objeto Rules
            </summary>
            <returns>
            string que representa este objeto Rules.
            </returns>
        </member>
        <member name="T:InformaticaTeoricaTarea2.Properties.Resources">
            <summary>
              Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
            </summary>
        </member>
        <member name="P:InformaticaTeoricaTarea2.Properties.Resources.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
            </summary>
        </member>
        <member name="P:InformaticaTeoricaTarea2.Properties.Resources.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
              búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
            </summary>
        </member>
        <member name="P:InformaticaTeoricaTarea2.Properties.Resources.banner">
            <summary>
              Busca un recurso adaptado de tipo System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
